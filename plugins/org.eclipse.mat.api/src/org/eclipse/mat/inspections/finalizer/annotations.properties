###############################################################################
# Copyright (c) 2009, 2010 SAP AG and IBM Corporation.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     SAP AG - initial API and implementation
#     IBM Corporation - additional annotations and fixes
###############################################################################
FinalizerInProcessingQuery.name = Finalizer In Processing
FinalizerInProcessingQuery.help = Extract object currently processed by Finalizer Thread.\n\n\
Finalizers are executed when the internal garbage collection frees the objects. \
Due to the lack of control over the finalizer execution, it is recommended to \
avoid finalizers. Long running tasks in the finalizer can block garbage \
collection, because the memory can only be freed after the finalize method finished. \
This query shows the currently processed object by each of the Finalizer Thread or threads if any. \
Be aware that there could be many reasons for this object to be currently processed:\n\
a.) it could be blocking,\n\
b.) it could be long running,\n\
or c.) it could be ok, but the queue was or is still full (please use our finalizer queue query to check).

FinalizerQuery.name = Finalizer Overview
FinalizerQuery.category = Java Basics
FinalizerQuery.help = Finalizer Overview.\n\n\
Finalizers are executed when the internal garbage collection frees the objects. \
Due to the lack of control over the finalizer execution, it is recommended to \
avoid finalizers. Long running tasks in the finalizer can block garbage \
collection, because the memory can only be freed after the finalize method finished.\
This query shows the the finalizer currently processed, the finalizer queue, \
the demon finalizer thread or threads and the thread local variables.

FinalizerQueueQuery.name = Finalizer Queue
FinalizerQueueQuery.help = Extract objects in the Finalizer Queue.\n\n\
Finalizers are executed when the internal garbage collection frees the objects. \
Due to the lack of control over the finalizer execution, it is recommended to \
avoid finalizers. Long running tasks in the finalizer can block garbage \
collection, because the memory can only be freed after the finalize method finished. \
This query shows the objects ready for finalization in their processing order. \
Be aware that there could be many reasons for a full finalizer queue: \
the currently processed object could be blocking or long running \
(please use our finalizer in processing query to check) or the application \
made use of too many objects with finalize() which are queueing up in memory.\n\n\
Note: On J9 JVM-based dumps (e.g. IBM Java, OpenJ9), this list shows objects waiting \
to be finalized and those which have already been finalized and are waiting to be \
garbage collected. This query does not provide a way to differentiate the two \
(because DTFJ doesn't), although you may be able to differentiate based on object \
fields (e.g. a "closed" boolean field, etc.).
FinalizerQueueQuery.mode.help = Whether to display the objects as a list, histogram or both.

FinalizerThreadLocalsQuery.name = Finalizer Thread Locals
FinalizerThreadLocalsQuery.help = Extract Finalizer Thread Locals.\n\n\
Finalizers are executed when the internal garbage collection frees the objects. \
Due to the lack of control over the finalizer execution, it is recommended to \
avoid finalizers. Long running tasks in the finalizer can block garbage \
collection, because the memory can only be freed after the finalize method finished. \
This query shows the thread locals of the daemon thread or threads which are performing \
the object finalizations. If there are any, this indicates misuse in at least \
one of the processed finalizers (finalize() implemented wrong) and might cause \
severe problems (e.g. unreclaimed memory always held by the finalizer thread or \
finalizer processed under no meaningful thread locals harming application logic).

FinalizerThreadQuery.name = Finalizer Thread
FinalizerThreadQuery.help = Extract Finalizer Threads.\n\n\
Finalizers are executed when the internal garbage collection frees the objects. \
Due to the lack of control over the finalizer execution, it is recommended to \
avoid finalizers. Long running tasks in the finalizer can block garbage \
collection, because the memory can only be freed after the finalize method finished. \
This query shows the daemon thread or threads which are performing the object finalizations.
