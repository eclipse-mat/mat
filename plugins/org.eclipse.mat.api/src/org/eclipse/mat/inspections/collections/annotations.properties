###############################################################################
# Copyright (c) 2008, 2018 SAP AG and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     SAP AG - initial API and implementation
###############################################################################
ArrayFillRatioQuery.name = Array Fill Ratio
ArrayFillRatioQuery.category = Java Collections
ArrayFillRatioQuery.help = Prints a frequency distribution of fill ratios of non-primitive arrays.\n\n\
The fill ratio is the proportion of non-null elements in the array. \
The arrays are then accumulated into as many segments as parameterized.\n\n\
This query works only on object arrays because primitive arrays cannot have null values.
ArrayFillRatioQuery.objects.help = The array objects. Non-array objects and primitive arrays will be ignored.
ArrayFillRatioQuery.segments.help = Number of ranges used for the frequency distribution.

ArraysBySizeQuery.name = Arrays Grouped By Size
ArraysBySizeQuery.category = Java Collections
ArraysBySizeQuery.help = Distribution histogram of given arrays by their size.
ArraysBySizeQuery.objects.help = The array objects. Non-array objects will be ignored.

CollectionFillRatioQuery.name = Collection Fill Ratio
CollectionFillRatioQuery.category = Java Collections
CollectionFillRatioQuery.help = Prints a frequency distribution of fill ratios of given collections.\n\n\
The below mentioned collections are known to the query. \
One additional custom collection (e.g. non-JDK) collection \
can be specified by the ''collection'', ''size_attribute'' and \
''array_attribute'' argument.\n\
Known collections:\n\
java.util.ArrayList\n\
java.util.HashMap\n\
java.util.Hashtable\n\
java.util.Properties\n\
java.util.Vector\n\
java.util.WeakHashMap\n\
java.util.concurrent.ConcurrentHashMap$Segment
CollectionFillRatioQuery.objects.help = The collection objects. Non-collection objects will be ignored.
CollectionFillRatioQuery.segments.help = Number of ranges used for the frequency distribution.
CollectionFillRatioQuery.collection.help = Optional: fully qualified class name of a custom (e.g. non-JDK) collection class.
CollectionFillRatioQuery.size_attribute.help = The size attribute of the (optionally) specified collection class. Must be of type int or Integer.
CollectionFillRatioQuery.array_attribute.help = The array attribute of the (optionally) specified collection class. Must be a Java array.

CollectionsBySizeQuery.name = Collections Grouped By Size
CollectionsBySizeQuery.category = Java Collections
CollectionsBySizeQuery.help = Distribution histogram of given collections by their size.\n\n\
The below mentioned collections are known to the query. \
One additional custom collection (e.g. non-JDK) collection \
can be specified by the 'collection' and 'size_attribute' argument.\n\
Known collections:\n\
java.util.ArrayList\n\
java.util.TreeMap\n\
java.util.HashMap\n\
java.util.Hashtable\n\
java.util.Properties\n\
java.util.Vector\n\
java.util.WeakHashMap\n\
java.util.concurrent.ConcurrentHashMap$Segment
CollectionsBySizeQuery.objects.help = The collection objects. Non-collection objects will be ignored.
CollectionsBySizeQuery.collection.help = Optional: fully qualified class name of a custom (e.g. non-JDK) collection class.
CollectionsBySizeQuery.size_attribute.help = The size attribute of the (optionally) specified collection class. Must be of type int or Integer.

ExtractListValuesQuery.name = Extract List Values
ExtractListValuesQuery.category = Java Collections
ExtractListValuesQuery.help = List elements of a single LinkedList, ArrayList or Vector object.
ExtractListValuesQuery.list.help = A specification for a single LinkedList, ArrayList or Vector object.\n\
Do not use the class pattern unless the class just has a singleton instance.\n\
Do not use the OQL query unless it returns a single object.

HashEntriesQuery.name = Hash Entries
HashEntriesQuery.category = Java Collections
HashEntriesQuery.help = Extracts the key-value pairs from hash maps and hashtables.\
The below mentioned maps are known to the query. \
One additional custom map (e.g. non-JDK) map \
can be specified by the ''collection'', ''array_attribute'', ''key_attribute'' and ''value_attribute'' arguments.\n\
Known collections:\n\
java.util.HashMap\n\
java.util.Hashtable\n\
java.util.Properties\n\
java.util.WeakHashMap\n\
java.util.concurrent.ConcurrentHashMap$Segment
HashEntriesQuery.collection.help = Optional: fully qualified class name of a custom (e.g. non-JDK) map class.
HashEntriesQuery.array_attribute.help = The array attribute of an (optionally) specified custom (e.g. non-JDK) map class.
HashEntriesQuery.key_attribute.help = The key attribute of an array entry of an (optionally) specified custom (e.g. non-JDK) map class.
HashEntriesQuery.value_attribute.help = The value attribute of an array entry of an (optionally) specified custom (e.g. non-JDK) map class.
HashEntriesQuery.objects.help = The hash map and hashtable objects. Non-map objects will be ignored.

HashSetValuesQuery.name = Extract Hash Set Values
HashSetValuesQuery.category = Java Collections
HashSetValuesQuery.help = List elements of a single HashSet.
HashSetValuesQuery.collection.help = Optional: fully qualified class name of a custom (e.g. non-JDK) hash set class.
HashSetValuesQuery.array_attribute.help = The array attribute of an (optionally) specified custom (e.g. non-JDK) hash set class.
HashSetValuesQuery.key_attribute.help = The key attribute of an array entry of an (optionally) specified custom (e.g. non-JDK) hash set class.
HashSetValuesQuery.hashSet.help = A specification for a single HashSet.\n\
Do not use the class pattern unless the class just has a singleton instance.\n\
Do not use the OQL query unless it returns a single object.

MapCollisionRatioQuery.name = Map Collision Ratio
MapCollisionRatioQuery.category = Java Collections
MapCollisionRatioQuery.help = Prints a frequency distribution of the collision ratios of map-like collections.\n\n\
The below listed map-like collections are known to the query. \
One additional custom map-like (e.g. non-JDK) collection \
can be specified by the 'collection', 'size_attribute' and \
'array_attribute' argument.\n\
Known collections:\n\
java.util.HashMap\n\
java.util.Properties\n\
java.util.Hashtable\n\
java.util.WeakHashMap\n\
java.util.concurrent.ConcurrentHashMap$Segment
MapCollisionRatioQuery.objects.help = The hashtable objects. Non-hashtable objects will be ignored.
MapCollisionRatioQuery.segments.help = Number of segments used for the frequency distribution.
MapCollisionRatioQuery.collection.help = Optional: fully qualified class name of a custom (e.g. non-JDK) map-like collection class.
MapCollisionRatioQuery.size_attribute.help = The size attribute of the (optionally) specified map-like collection. Must be of type int or Integer.
MapCollisionRatioQuery.array_attribute.help = The array attribute of the (optionally) specified map-like collection. Must be a Java array.

PrimitiveArraysWithAConstantValueQuery.name = Primitive Arrays With a Constant Value
PrimitiveArraysWithAConstantValueQuery.category = Java Collections
PrimitiveArraysWithAConstantValueQuery.help = List primitive arrays with a constant value.
PrimitiveArraysWithAConstantValueQuery.objects.help = The array objects. Only primitive arrays will be examined.
