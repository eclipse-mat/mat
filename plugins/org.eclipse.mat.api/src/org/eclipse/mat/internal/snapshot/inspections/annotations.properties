###############################################################################
# Copyright (c) 2008, 2011 SAP AG and IBM Corporation.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     SAP AG - initial API and implementation
#     IBM Corporation - additional annotations and fixes, compare tables
###############################################################################
DominatorQuery.name = Dominator Tree
DominatorQuery.help = Open Dominator Tree for entire heap. The dominator tree shows keep-alive relationships between objects. \
All objects under a node are eligible for garbage collection once the node itself is eligible for garbage collection.
DominatorQuery.groupBy.help = Whether to group the objects in the resulting tree by class, classloader or by package. \
Group by classloader puts the classloader object, all classes loaded by the classloader and all instances of those classes together.

ShowInDominatorQuery.name = Open In Dominator Tree
ShowInDominatorQuery.category = Java Basics
ShowInDominatorQuery.help = Open Dominator Tree for selected objects.
ShowInDominatorQuery.objects.help = Objects for which the dominator tree should be shown.
ShowInDominatorQuery.groupBy.help = Whether to group the objects in the resulting tree by class, classloader or by package. \
Group by classloader puts the classloader object, all classes loaded by the classloader and all instances of those classes together.


Path2GCRootsQuery.name = exclude custom field...
Path2GCRootsQuery.category = 3|Path To GC Roots
Path2GCRootsQuery.menu.0.label = 1|with all references
Path2GCRootsQuery.menu.1.label = 2|exclude weak references
Path2GCRootsQuery.menu.2.label = 3|exclude soft references
Path2GCRootsQuery.menu.3.label = 4|exclude phantom references
Path2GCRootsQuery.menu.4.label = 5|exclude weak/soft references
Path2GCRootsQuery.menu.5.label = 6|exclude phantom/soft references
Path2GCRootsQuery.menu.6.label = 7|exclude phantom/weak references
Path2GCRootsQuery.menu.7.label = 8|exclude all phantom/weak/soft etc. references
Path2GCRootsQuery.help = Find paths to garbage collection roots from a single object. The paths show the reasons why \
this object is kept alive. \
The query only works for a single object.
Path2GCRootsQuery.object.help = Specification for a single object for which paths to garbage collection roots should be found.\n\
Do not use the class pattern unless the class just has a singleton instance.\n\
Do not use the OQL query unless it returns a single object.
Path2GCRootsQuery.excludes.help = Fields of certain classes which should be ignored when finding paths. \
For example this allows paths through Weak or Soft Reference referents to be ignored.
Path2GCRootsQuery.numberOfPaths.help = The number of different paths to be displayed.

MultiplePath2GCRootsQuery.name = exclude custom field...
MultiplePath2GCRootsQuery.category = 4|Merge Shortest Paths to GC Roots
MultiplePath2GCRootsQuery.menu.0.label = 1|with all references
MultiplePath2GCRootsQuery.menu.1.label = 2|exclude weak references
MultiplePath2GCRootsQuery.menu.2.label = 3|exclude soft references
MultiplePath2GCRootsQuery.menu.3.label = 4|exclude phantom references
MultiplePath2GCRootsQuery.menu.4.label = 5|exclude weak/soft references
MultiplePath2GCRootsQuery.menu.5.label = 6|exclude phantom/soft references
MultiplePath2GCRootsQuery.menu.6.label = 7|exclude phantom/weak references
MultiplePath2GCRootsQuery.menu.7.label = 8|exclude all phantom/weak/soft etc. references
MultiplePath2GCRootsQuery.help = Find common paths from garbage collection roots to an object or set of objects.
MultiplePath2GCRootsQuery.objects.help = Objects for which paths to garbage collection roots should be found.
MultiplePath2GCRootsQuery.excludes.help = Fields of certain classes which should be ignored when finding paths. \
For example this allows paths through Weak or Soft Reference referents to be ignored.
MultiplePath2GCRootsQuery.groupBy.help = Whether to show:\n\
merged paths from garbage collection roots to the objects\n\
merged paths from garbage collection roots to the objects grouped by class, so all objects of the same class are shown as one\n\
merged paths from objects to garbage collection roots grouped by class, so all objects of the same class are shown as one

CompareTablesQuery.name = Compare Tables and Trees
CompareTablesQuery.menu.0.label = Compare tables and trees with all set operations
CompareTablesQuery.menu.1.label = Compare tables and trees ignoring addresses when matching keys
CompareTablesQuery.help = Compares two or more tables or trees. If the tables or trees are from the same snapshot \
as the current snapshot then the context menu shows objects from those tables or trees. It also can perform \
the following operations depending on the setop argument:\n\
Table 1\u2229Table 2 The intersection of that row from table 1 and table 2, so only the objects from that row in both tables\n\
Table 1\u222ATable 2 The intersection of that row from table 1 and table 2, so all the objects from that row in either table\n\
Table 1\u2296Table 2 The symmetric difference of that row from table 1 and table 2, so all the objects from that row in only one table (or an odd number of tables)\n\
Table 1\u2216Table 2 The difference of that row between table 1 and table 2, so all the objects from that row in table 1 but not table 2\n\
Table 2\u2216Table 1 The difference of that row between table 2 and table 1, so all the objects from that row in table 2 but not table 1
CompareTablesQuery.tables.help = The tables or trees to be compared
CompareTablesQuery.contents.help = The query contexts corresponding to the tables
CompareTablesQuery.context.help = The query context of the current snapshot
CompareTablesQuery.mode.help = Whether to show absolute values in columns, or the difference from the base table, \
or the difference from the preceding table.
CompareTablesQuery.setOp.help = Whether to just show the raw tables, or only a particular set operation, or all the tables \
and the set operations as context menus.
CompareTablesQuery.snapshots.help = The snapshots corresponding to the tables. Optional if all the tables are from the current snapshot.
CompareTablesQuery.keyColumn.help = The number of the column to be matched between the tables (default of column 1).
CompareTablesQuery.mask.help = Regular expression to mask part of the key, for example addresses \
using: \\s@ 0x[0-9a-f]+ or an array index using ^\\[[0-9]+\\]$
CompareTablesQuery.replace.help = Replacement text for mask matches.
CompareTablesQuery.prefix.help = Whether to include the prefix of the key column in the match \
- for example the field name in a path.
CompareTablesQuery.suffix.help = Whether to include the suffix of the key column in the match \
- for example the GC root type.
CompareTablesQuery.extraReferences.help = The key can be extended by adding field references to be \
matched. The extra key values are specified as follows:\n\
\textra ::= <className> [: <field> [, <field> ]]\n\
Example:\n\
\tjava.lang.Module:name\n\
If the object is an instance of that type then the values of those fields are resolved and added to the key. \
If the fields are omitted then the class specific name of the object itself is resolved.
CompareTablesQuery.extraReferencesListFile.help = Read extra key values from the file. Each line must have the same format \
as for the -x argument.
