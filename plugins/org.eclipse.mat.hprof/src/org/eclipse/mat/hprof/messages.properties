###############################################################################
# Copyright (c) 2010, 2016 SAP AG and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#     SAP AG - initial API and implementation
#     IBM Corporation - multiple snapshots
###############################################################################
AbstractParser_Error_IllegalType=Illegal Type:  {0}
AbstractParser_Error_InvalidHPROFHeader=Invalid HPROF file header.
AbstractParser_Error_NotHeapDump=Not a HPROF heap dump
AbstractParser_Error_UnknownHPROFVersion=Unknown HPROF Version ({0})
AbstractParser_Error_UnsupportedHPROFVersion=Unsupported HPROF Version {0}
EnhancerRegistry_ErrorCreatingParser=Error creating parser for {0}
EnhancerRegistry_ErrorCreatingRuntime=Error creating runtime for {0}
HprofIndexBuilder_ExtractingObjects=Extracting objects from {0}
HprofIndexBuilder_Parsing=Parsing {0}
HprofIndexBuilder_Scanning=Scanning {0}
HprofIndexBuilder_Writing=Writing {0}
HprofParserHandlerImpl_Error_ExpectedClassSegment=Error: Found instance segment but expected class segment (see FAQ): 0x{0}
HprofParserHandlerImpl_Error_MultipleClassInstancesExist=multiple class instances exist for {0}
HprofParserHandlerImpl_HeapContainsObjects=Heap {0} contains {1,number} objects
HprofRandomAccessParser_Error_DumpIncomplete=need to create dummy class. dump incomplete
HprofRandomAccessParser_Error_DuplicateClass=Duplicate class: {0}
HprofRandomAccessParser_Error_IllegalDumpSegment=Illegal dump segment {0}
HprofRandomAccessParser_Error_MissingClass=missing fake class {0}
HprofRandomAccessParser_Error_MissingFakeClass=missing fake class
JMapHeapDumpProvider_ErrorCreatingDump=Error creating heap dump. jmap exit code = 
JMapHeapDumpProvider_HeapDumpNotCreated=Heap dump file was not created. jmap exit code = 
JMapHeapDumpProvider_WaitForHeapDump=Waiting while the heap dump is written to the disk
JMapHeapDumpProvider_ListProcesses=Listing VMs using jps
LocalJavaProcessesUtils_ErrorGettingProcesses=Error getting list of processes
LocalJavaProcessesUtils_ErrorGettingProcessListJPS=Error getting Java processes list with 'jps'. Try to configure a JDK for the HPROF jmap provider
Pass1Parser_DetectedCompressedReferences=Detected compressed references, because with uncompressed 64-bit references the array at 0x{0} would overlap the array at 0x{1}
Pass1Parser_Error_IllegalRecordLength=Illegal record length {0} at byte {1} for record type {2}
Pass1Parser_Error_IllegalType=Illegal primitive object array type
Pass1Parser_Error_InvalidHeapDumpFile=Error: Invalid heap dump file.\n Unsupported segment type {0} at position {1}
Pass1Parser_Error_invalidHPROFFile=(Possibly) Invalid HPROF file: Expected to read another {0,number} bytes, but only {1,number} bytes are available.
Pass1Parser_Error_SupportedDumps=Only 32bit and 64bit dumps are supported.
Pass1Parser_Error_UnresolvedName=Unresolved Name 0x
Pass1Parser_Error_WritingThreadsInformation=Error writing threads information
Pass1Parser_Info_WroteThreadsTo=Wrote threads call stacks to {0}
Pass1Parser_Error_NoHeapDumpIndexFound=Parser found {0} HPROF dumps in file {1}. No heap dump index {2} found. See FAQ.
Pass1Parser_Info_UsingDumpIndex=Parser found {0} HPROF dumps in file {1}. Using dump index {2}. See FAQ.
Pass1Parser_UnexpectedEndPosition=Heap dump segment at 0x{0} size {1} ends at 0x{2} instead of 0x{3}
Pass1Parser_UnexpectedRecord=Heap dump record 0x{0} size {1} is not a supported record type.
Pass1Parser_GuessingLengthOverflow=Guessing that heap dump record 0x{0} at 0x{1} with length {2} is probably overflowed, updating to length {3}. See bug 404679.
Pass1Parser_HeapDumpCreated=Heap dump created at {0,time,long} {0,date,long}
Pass1Parser_HeapDumpsFound={0} heap dumps found
Pass2Parser_Error_HandleMustCreateFakeClassForName=handler must create fake class for {0}
Pass2Parser_Error_HandlerMustCreateFakeClassForAddress=handler must create fake class for 0x{0}
Pass2Parser_Error_InsufficientBytesRead=Insufficient bytes read for instance at {0}, expected {1} read {2}
HPROFPreferences_Description=Optional configuration of the HPROF heapdump parser.
HPROFPreferences_Strictness=Parser Strictness: What to do when the dump doesn't match the specification
HPROFPreferences_Strictness_Stop=Strict: Do not finish loading the dump and throw an error. For one exception to this strictness, see bug 404679.
HPROFPreferences_Strictness_Warning=Warning: Continue parsing and loading the dump and raise a warning to the Error Log.
HPROFPreferences_Strictness_Permissive=Permissive: Raise a warning and try to fix the potential problem.
HPROFStrictness_Unhandled_Preference=The parser does not know how to handle the current strictness preference in some situations.
HPROFStrictness_Stopped=The HPROF parser encountered a violation of the HPROF specification that it could not safely handle. This could be due to file truncation or a bug in the JVM. Please consider filing a bug at eclipse.org. To continue parsing the dump anyway, you can use -DhprofStrictnessWarning=true or set the strictness mode under Preferences > HPROF Parser > Parser Strictness. See the inner exception for details.
