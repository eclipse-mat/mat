/*******************************************************************************
 * Copyright (c) 2008, 2014 SAP AG, IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     SAP AG - initial API and implementation
 *     IBM Corporation - move to JavaCC 5.0
 *******************************************************************************/
/* Generated By:JavaCC: Do not edit this line. OQLParser.java */
package org.eclipse.mat.parser.internal.oql.parser;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;

import org.eclipse.mat.parser.internal.Messages;
import org.eclipse.mat.parser.internal.oql.ICompiler;
import org.eclipse.mat.parser.internal.oql.compiler.Attribute;
import org.eclipse.mat.parser.internal.oql.compiler.Expression;
import org.eclipse.mat.parser.internal.oql.compiler.Query;
import org.eclipse.mat.util.MessageUtil;

@SuppressWarnings("nls")
public class OQLParser implements OQLParserConstants
{
    ICompiler compiler;

    public void setCompiler(ICompiler compiler)
    {
        this.compiler = compiler;
    }

    public static void main(String args[]) throws ParseException
    {
        System.out.println("Reading from stdin");
        OQLParser p = new OQLParser(System.in);
        p.setCompiler(new org.eclipse.mat.parser.internal.oql.compiler.CompilerImpl());
        Query q = p.ParseQueryFromInputLine();
        System.out.println(q);

        System.out.println("Parse Successfull");
    }

    protected boolean seeUnreservedKeyword(String keyword)
    {
        return (getToken(1).kind == IDENTIFIER && keyword.equals(getToken(1).image.toUpperCase(Locale.ENGLISH)));
    }

    protected boolean seeUnreservedKeyword(String... keywords)
    {
        for (int index = 0; index < keywords.length; index++)
        {
            if (getToken(index + 1).kind != IDENTIFIER
                            || !keywords[index].equals(getToken(index + 1).image.toUpperCase(Locale.ENGLISH)))
                return false;
        }
        return true;
    }

    protected boolean seeExclude(String... keywords)
    {
        if (getToken(1).kind != IDENTIFIER)
            return false;

        String image = getToken(1).image.toUpperCase(Locale.ENGLISH);
        for (int index = 0; index < keywords.length; index++)
            if (keywords[index].equals(image))
                return false;

        return true;
    }

    protected ParseException generateCustomParseException(String... keywords)
    {
        Token currentToken = getToken(0);

        StringBuilder buf = new StringBuilder();
        for (String keyword : keywords)
            buf.append("\n\t\"").append(keyword).append('"');

        String msg = MessageUtil.format(Messages.OQLParser_Encountered_X_at_line_X_column_X_Was_expecting_one_of_X,
                        currentToken.next.image, currentToken.next.beginLine, currentToken.next.beginColumn,
                        buf.toString());

        ParseException e = new ParseException(msg);
        e.currentToken = currentToken;
        return e;
    }

    /*******************************
     * THE OQL GRAMMAR STARTS HERE *
     *******************************/
    final public Query ParseQuery() throws ParseException
    {
        Query q;
        q = SelectStatement();
        jj_consume_token(0);
        {
            if (true)
                return q;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Query ParseQueryFromInputLine() throws ParseException
    {
        Query q;
        q = SelectStatement();
        jj_consume_token(TERMINATOR);
        {
            if (true)
                return q;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Query SelectStatement() throws ParseException
    {
        Query q = new Query();
        try
        {
            if (seeUnreservedKeyword("SELECT"))
            {

            }
            else
            {
                jj_consume_token(-1);
                throw new ParseException();
            }
            jj_consume_token(IDENTIFIER);
        }
        catch (ParseException e)
        {
            {
                if (true)
                    throw generateCustomParseException("SELECT");
            }
        }
        SelectList(q);
        FromClause(q);
        if (jj_2_1(1))
        {
            WhereClause(q);
        }
        else
        {

        }
        if (jj_2_2(1))
        {
            UnionClause(q);
        }
        else
        {

        }
        {
            if (true)
                return q;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    /* ---------------- select --------------------- */
    final public void SelectList(Query q) throws ParseException
    {
        Query.SelectClause selectClause = new Query.SelectClause();
        List<Query.SelectItem> columns = new ArrayList<Query.SelectItem>();
        Query.SelectItem a;
        if (jj_2_3(1))
        {
            if (seeUnreservedKeyword("DISTINCT"))
            {
                jj_consume_token(IDENTIFIER);
                selectClause.setDistinct(true);
            }
            else if (seeUnreservedKeyword("AS", "RETAINED", "SET"))
            {
                jj_consume_token(IDENTIFIER);
                jj_consume_token(IDENTIFIER);
                jj_consume_token(IDENTIFIER);
                selectClause.setRetainedSet(true);
            }
            else
            {
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        else
        {

        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case STAR:
                jj_consume_token(STAR);
                break;
            default:
                jj_la1[1] = jj_gen;
                if (seeUnreservedKeyword("OBJECTS"))
                {
                    jj_consume_token(IDENTIFIER);
                    a = SelectItem();
                    columns.add(a);
                    selectClause.setAsObjects(true);
                }
                else
                {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case INTEGER_LITERAL:
                        case LONG_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case TRUE:
                        case FALSE:
                        case NULL:
                        case DOLLAR_SIGN:
                        case IDENTIFIER:
                        case NATIVE:
                        case LPAREN:
                        case PLUS:
                        case MINUS:
                            a = SelectItem();
                            columns.add(a);
                            label_1: while (true)
                            {
                                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                                {
                                    case COMMA:

                                        break;
                                    default:
                                        jj_la1[0] = jj_gen;
                                        break label_1;
                                }
                                jj_consume_token(COMMA);
                                a = SelectItem();
                                columns.add(a);
                            }
                            break;
                        default:
                            jj_la1[2] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
        selectClause.setSelectList(columns);
        q.setSelectClause(selectClause);
    }

    final public Query.SelectItem SelectItem() throws ParseException
    {
        Object ex = null;
        Token t1 = null, t2 = null;
        ex = SimpleExpression();
        if (seeUnreservedKeyword("AS"))
        {
            jj_consume_token(IDENTIFIER);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case STRING_LITERAL:
                    t1 = jj_consume_token(STRING_LITERAL);
                    break;
                case IDENTIFIER:
                    t2 = jj_consume_token(IDENTIFIER);
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        else
        {

        }
        String name = null;
        if (t1 != null)
            name = t1.image.substring(1, t1.image.length() - 1);
        else if (t2 != null)
            name = t2.image;

        {
            if (true)
                return new Query.SelectItem(name, (Expression) ex);
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object PathExpression() throws ParseException
    {
        List<Object> elements = new ArrayList<Object>();
        Object ex = null;
        Object index, index2 = null;
        ex = ObjectFacet(true);
        elements.add(ex);
        label_2: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case DOT:
                case ARRAYLEFT:

                    break;
                default:
                    jj_la1[4] = jj_gen;
                    break label_2;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case DOT:
                    jj_consume_token(DOT);
                    ex = ObjectFacet(false);
                    elements.add(ex);
                    break;
                case ARRAYLEFT:
                    jj_consume_token(ARRAYLEFT);
                    index = SimpleExpression();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case COLON:
                            jj_consume_token(COLON);
                            index2 = SimpleExpression();
                            break;
                        default:
                            jj_la1[5] = jj_gen;

                    }
                    jj_consume_token(ARRAYRIGHT);
                    ex = index2 != null ? compiler.array(index, index2) : compiler.array(index);
                    index2 = null;
                    elements.add(ex);
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true)
                return compiler.path(elements);
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object EnvVarPathExpression() throws ParseException
    {
        LinkedList<Object> elements = new LinkedList<Object>();
        Object ex = null;
        Token t_name = null;
        Object index, index2 = null;
        jj_consume_token(DOLLAR_SIGN);
        jj_consume_token(LBRACE);
        t_name = jj_consume_token(IDENTIFIER);
        jj_consume_token(RBRACE);
        label_3: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case DOT:
                case ARRAYLEFT:

                    break;
                default:
                    jj_la1[7] = jj_gen;
                    break label_3;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case DOT:
                    jj_consume_token(DOT);
                    ex = ObjectFacet(false);
                    elements.add(ex);
                    break;
                case ARRAYLEFT:
                    jj_consume_token(ARRAYLEFT);
                    index = SimpleExpression();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case COLON:
                            jj_consume_token(COLON);
                            index2 = SimpleExpression();
                            break;
                        default:
                            jj_la1[8] = jj_gen;

                    }
                    jj_consume_token(ARRAYRIGHT);
                    ex = index2 != null ? compiler.array(index, index2) : compiler.array(index);
                    index2 = null;
                    elements.add(ex);
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        elements.addFirst(new Attribute(t_name.image, false, true));
        {
            if (true)
                return compiler.path(elements);
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object ObjectFacet(boolean isFirstInPath) throws ParseException
    {
        Token t_native = null, t_name = null;
        List<Expression> parameters = null;
        Object ex = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case NATIVE:
                t_native = jj_consume_token(NATIVE);
                break;
            default:
                jj_la1[10] = jj_gen;

        }
        t_name = jj_consume_token(IDENTIFIER);
        if (jj_2_4(2147483647))
        {
            parameters = ParameterList();
        }
        else
        {

        }
        if (parameters != null)
            ex = compiler.method(t_name.image, parameters, isFirstInPath);
        else
            ex = new Attribute(t_name.image, t_native != null, false);
        {
            if (true)
                return ex;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public List<Expression> ParameterList() throws ParseException
    {
        List<Expression> parameters = new ArrayList<Expression>();
        Object expr = null;
        jj_consume_token(LPAREN);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case TRUE:
            case FALSE:
            case NULL:
            case DOLLAR_SIGN:
            case IDENTIFIER:
            case NATIVE:
            case LPAREN:
            case PLUS:
            case MINUS:
                expr = SimpleExpression();
                parameters.add((Expression) expr);
                label_4: while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case COMMA:

                            break;
                        default:
                            jj_la1[11] = jj_gen;
                            break label_4;
                    }
                    jj_consume_token(COMMA);
                    expr = SimpleExpression();
                    parameters.add((Expression) expr);
                }
                break;
            default:
                jj_la1[12] = jj_gen;

        }
        jj_consume_token(RPAREN);
        {
            if (true)
                return parameters;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    /* ---------------- from --------------------- */
    final public void FromClause(Query q) throws ParseException
    {
        Query.FromClause fromItem = new Query.FromClause();
        Query subSelect = null;

        boolean isObjects = false;
        Object ex = null;
        Token t1 = null, t2 = null;
        try
        {
            if (seeUnreservedKeyword("FROM"))
            {

            }
            else
            {
                jj_consume_token(-1);
                throw new ParseException();
            }
            jj_consume_token(IDENTIFIER);
        }
        catch (ParseException e)
        {
            {
                if (true)
                    throw generateCustomParseException("FROM");
            }
        }
        if (seeUnreservedKeyword("OBJECTS"))
        {
            jj_consume_token(IDENTIFIER);
            isObjects = true;
        }
        else
        {

        }
        if (jj_2_5(2147483647))
        {
            t1 = jj_consume_token(INSTANCEOF);
        }
        else
        {

        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case INTEGER_LITERAL:
            case HEX_LITERAL:
            case STRING_LITERAL:
            case DOLLAR_SIGN:
            case IDENTIFIER:
                FromItem(fromItem);
                break;
            case LPAREN:
                jj_consume_token(LPAREN);
                if (jj_2_6(1))
                {
                    subSelect = SelectStatement();
                }
                else
                {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case INTEGER_LITERAL:
                        case LONG_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case TRUE:
                        case FALSE:
                        case NULL:
                        case DOLLAR_SIGN:
                        case IDENTIFIER:
                        case NATIVE:
                        case LPAREN:
                        case PLUS:
                        case MINUS:
                            ex = ConditionalOrExpression();
                            break;
                        default:
                            jj_la1[13] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(RPAREN);
                break;
            default:
                jj_la1[14] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        if (seeExclude("WHERE", "UNION"))
        {
            t2 = jj_consume_token(IDENTIFIER);
        }
        else
        {

        }
        fromItem.setSubSelect(subSelect);
        if (ex != null)
            fromItem.setCall((Expression) ex);
        fromItem.setIncludeObjects(isObjects);
        fromItem.setIncludeSubClasses(t1 != null);

        if (t2 != null)
            fromItem.setAlias(t2.image);

        q.setFromClause(fromItem);
    }

    final public void FromItem(Query.FromClause fromClause) throws ParseException
    {
        Token t = null;
        Object expr = null;
        String className = null;
        long address = 0;
        int objectId = 0;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case DOLLAR_SIGN:
                expr = EnvVarPathExpression();
                fromClause.setCall((Expression) expr);
                break;
            case IDENTIFIER:
                className = ClassName();
                fromClause.setClassName(className);
                break;
            case STRING_LITERAL:
                t = jj_consume_token(STRING_LITERAL);
                fromClause.setClassNamePattern(t.image.substring(1, t.image.length() - 1));
                break;
            case HEX_LITERAL:
                address = ObjectAddress();
                fromClause.addObjectAddress(address);
                label_5: while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case COMMA:

                            break;
                        default:
                            jj_la1[15] = jj_gen;
                            break label_5;
                    }
                    jj_consume_token(COMMA);
                    address = ObjectAddress();
                    fromClause.addObjectAddress(address);
                }
                break;
            case INTEGER_LITERAL:
                objectId = ObjectId();
                fromClause.addObjectId(objectId);
                label_6: while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case COMMA:

                            break;
                        default:
                            jj_la1[16] = jj_gen;
                            break label_6;
                    }
                    jj_consume_token(COMMA);
                    objectId = ObjectId();
                    fromClause.addObjectId(objectId);
                }
                break;
            default:
                jj_la1[17] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public String ClassName() throws ParseException
    {
        StringBuilder b = new StringBuilder();
        Token t;
        t = jj_consume_token(IDENTIFIER);
        b.append(t.image);
        label_7: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case DOT:

                    break;
                default:
                    jj_la1[18] = jj_gen;
                    break label_7;
            }
            jj_consume_token(DOT);
            t = jj_consume_token(IDENTIFIER);
            b.append(".").append(t.image);
        }
        label_8: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case ARRAY:

                    break;
                default:
                    jj_la1[19] = jj_gen;
                    break label_8;
            }
            jj_consume_token(ARRAY);
            b.append("[]");
        }
        {
            if (true)
                return b.toString();
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public long ObjectAddress() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(HEX_LITERAL);
        {
            if (true)
                return new BigInteger(t.image.substring(2), 16).longValue();
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public int ObjectId() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(INTEGER_LITERAL);
        {
            if (true)
                return Integer.parseInt(t.image);
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    /* ---------------- where --------------------- */
    final public void WhereClause(Query q) throws ParseException
    {
        Object ex;
        if (seeUnreservedKeyword("WHERE"))
        {

        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        jj_consume_token(IDENTIFIER);
        ex = ConditionalOrExpression();
        q.setWhereClause((Expression) ex);
    }

    final public Object ConditionalOrExpression() throws ParseException
    {
        Object ex, r;
        ArrayList<Object> list = null;
        ex = ConditionalAndExpression();
        label_9: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case OR:

                    break;
                default:
                    jj_la1[20] = jj_gen;
                    break label_9;
            }
            jj_consume_token(OR);
            r = ConditionalAndExpression();
            if (list == null)
            {
                list = new ArrayList<Object>();
                list.add(ex);
            }
            list.add(r);
        }
        if (list != null)
        {
            ex = compiler.or(list.toArray());
        }
        {
            if (true)
                return ex;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object ConditionalAndExpression() throws ParseException
    {
        Object ex, r;
        ArrayList<Object> list = null;
        ex = EqualityExpression();
        label_10: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case AND:

                    break;
                default:
                    jj_la1[21] = jj_gen;
                    break label_10;
            }
            jj_consume_token(AND);
            r = EqualityExpression();
            if (list == null)
            {
                list = new ArrayList<Object>();
                list.add(ex);
            }
            list.add(r);
        }
        if (list != null)
        {
            ex = compiler.and(list.toArray());
        }
        {
            if (true)
                return ex;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object EqualityExpression() throws ParseException
    {
        Object ex, r;
        ex = RelationalExpression();
        label_11: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case EQ:
                case NE:

                    break;
                default:
                    jj_la1[22] = jj_gen;
                    break label_11;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case EQ:
                    jj_consume_token(EQ);
                    r = RelationalExpression();
                    ex = compiler.equal(ex, r);
                    break;
                case NE:
                    jj_consume_token(NE);
                    r = RelationalExpression();
                    ex = compiler.notEqual(ex, r);
                    break;
                default:
                    jj_la1[23] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true)
                return ex;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object RelationalExpression() throws ParseException
    {
        Object ex, r;
        ex = SimpleExpression();
        if (jj_2_7(1))
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case LT:
                    jj_consume_token(LT);
                    r = SimpleExpression();
                    ex = compiler.lessThan(ex, r);
                    break;
                case GT:
                    jj_consume_token(GT);
                    r = SimpleExpression();
                    ex = compiler.greaterThan(ex, r);
                    break;
                case LE:
                    jj_consume_token(LE);
                    r = SimpleExpression();
                    ex = compiler.lessThanOrEqual(ex, r);
                    break;
                case GE:
                    jj_consume_token(GE);
                    r = SimpleExpression();
                    ex = compiler.greaterThanOrEqual(ex, r);
                    break;
                default:
                    jj_la1[24] = jj_gen;
                    if (seeUnreservedKeyword("LIKE"))
                    {
                        ex = LikeClause(ex, true);
                    }
                    else if (seeUnreservedKeyword("IN"))
                    {
                        ex = InClause(ex, true);
                    }
                    else if (seeUnreservedKeyword("NOT"))
                    {
                        ex = NotLikeInClause(ex);
                    }
                    else
                    {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                        {
                            case IMPLEMENTS:
                                jj_consume_token(IMPLEMENTS);
                                r = ClassName();
                                ex = compiler.instanceOf(ex, (String) r);
                                break;
                            default:
                                jj_la1[25] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                    }
            }
        }
        else
        {

        }
        {
            if (true)
                return ex;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    // only identifer (see [2]
    // http://www.engr.mun.ca/~theo/JavaCC-FAQ/javacc-faq-moz.htm#keywords)
    final public Object NotLikeInClause(Object left) throws ParseException
    {
        Object ex;
        jj_consume_token(IDENTIFIER);
        if (seeUnreservedKeyword("LIKE"))
        {
            ex = LikeClause(left, false);
        }
        else if (seeUnreservedKeyword("IN"))
        {
            ex = InClause(left, false);
        }
        else
        {
            jj_consume_token(-1);
            throw new ParseException();
        }
        {
            if (true)
                return ex;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object LikeClause(Object left, boolean isLike) throws ParseException
    {
        Token t1 = null;
        jj_consume_token(IDENTIFIER);
        t1 = jj_consume_token(STRING_LITERAL);
        String pattern = t1.image.substring(1, t1.image.length() - 1);
        {
            if (true)
                return isLike ? compiler.like(left, pattern) : compiler.notLike(left, pattern);
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object InClause(Object left, boolean isIn) throws ParseException
    {
        Object r;
        jj_consume_token(IDENTIFIER);
        r = SimpleExpression();
        {
            if (true)
                return isIn ? compiler.in(left, r) : compiler.notIn(left, r);
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object SimpleExpression() throws ParseException
    {
        Object ex, r;
        ex = MultiplicativeExpression();
        label_12: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case PLUS:
                case MINUS:

                    break;
                default:
                    jj_la1[26] = jj_gen;
                    break label_12;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case PLUS:
                    jj_consume_token(PLUS);
                    r = MultiplicativeExpression();
                    ex = compiler.plus(ex, r);
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    r = MultiplicativeExpression();
                    ex = compiler.minus(ex, r);
                    break;
                default:
                    jj_la1[27] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true)
                return ex;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object MultiplicativeExpression() throws ParseException
    {
        Object ex, r;
        ex = PrimaryExpression();
        label_13: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case STAR:
                case DIVIDE:

                    break;
                default:
                    jj_la1[28] = jj_gen;
                    break label_13;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case STAR:
                    jj_consume_token(STAR);
                    r = PrimaryExpression();
                    ex = compiler.multiply(ex, r);
                    break;
                case DIVIDE:
                    jj_consume_token(DIVIDE);
                    r = PrimaryExpression();
                    ex = compiler.divide(ex, r);
                    break;
                default:
                    jj_la1[29] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true)
                return ex;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object PrimaryExpression() throws ParseException
    {
        Object ex;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case TRUE:
            case FALSE:
            case NULL:
            case PLUS:
            case MINUS:
                ex = Literal();
                {
                    if (true)
                        return ex;
                }
                break;
            case LPAREN:
                jj_consume_token(LPAREN);
                if (seeUnreservedKeyword("SELECT"))
                {
                    ex = SubQuery();
                }
                else
                {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case INTEGER_LITERAL:
                        case LONG_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case TRUE:
                        case FALSE:
                        case NULL:
                        case DOLLAR_SIGN:
                        case IDENTIFIER:
                        case NATIVE:
                        case LPAREN:
                        case PLUS:
                        case MINUS:
                            ex = ConditionalOrExpression();
                            break;
                        default:
                            jj_la1[30] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(RPAREN);
                {
                    if (true)
                        return ex;
                }
                break;
            case IDENTIFIER:
            case NATIVE:
                ex = PathExpression();
                {
                    if (true)
                        return ex;
                }
                break;
            case DOLLAR_SIGN:
                ex = EnvVarPathExpression();
                {
                    if (true)
                        return ex;
                }
                break;
            default:
                jj_la1[31] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object SubQuery() throws ParseException
    {
        Query q;
        q = SelectStatement();
        {
            if (true)
                return compiler.subQuery(q);
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object Literal() throws ParseException
    {
        Object ex;
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOATING_POINT_LITERAL:
            case PLUS:
            case MINUS:
                ex = NumberLiteral();
                break;
            case CHARACTER_LITERAL:
                t = jj_consume_token(CHARACTER_LITERAL);
                ex = compiler.literal(Character.valueOf(t.image.charAt(1)));
                break;
            case STRING_LITERAL:
                t = jj_consume_token(STRING_LITERAL);
                ex = compiler.literal(t.image.substring(1, t.image.length() - 1));
                break;
            case TRUE:
            case FALSE:
                ex = BooleanLiteral();
                break;
            case NULL:
                ex = NullLiteral();
                break;
            default:
                jj_la1[32] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true)
                return ex;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object NumberLiteral() throws ParseException
    {
        Object ex;
        Token t, unary = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case PLUS:
            case MINUS:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                {
                    case PLUS:
                        unary = jj_consume_token(PLUS);
                        break;
                    case MINUS:
                        unary = jj_consume_token(MINUS);
                        break;
                    default:
                        jj_la1[33] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[34] = jj_gen;

        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case INTEGER_LITERAL:
                t = jj_consume_token(INTEGER_LITERAL);
                int anInt;
                if (unary != null && "-".equals(unary.image))
                    anInt = Integer.parseInt(unary.image + t.image);
                else
                    anInt = Integer.parseInt(t.image);

                ex = compiler.literal(anInt);
                break;
            case LONG_LITERAL:
                t = jj_consume_token(LONG_LITERAL);
                long aLong;
                if (unary != null && "-".equals(unary.image))
                    aLong = Long.parseLong(unary.image + t.image.substring(0, t.image.length() - 1));
                else
                    aLong = Long.parseLong(t.image.substring(0, t.image.length() - 1));

                ex = compiler.literal(aLong);
                break;
            case FLOATING_POINT_LITERAL:
                t = jj_consume_token(FLOATING_POINT_LITERAL);
                if (t.image.endsWith("d") || t.image.endsWith("D"))
                {
                    double aDouble = Double.parseDouble(t.image);
                    if (unary != null && "-".equals(unary.image))
                        aDouble *= -1;

                    ex = compiler.literal(aDouble);
                }
                else
                {
                    float aFloat = Float.parseFloat(t.image);
                    if (unary != null && "-".equals(unary.image))
                        aFloat *= -1;

                    ex = compiler.literal(aFloat);
                }
                break;
            default:
                jj_la1[35] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true)
                return ex;
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object BooleanLiteral() throws ParseException
    {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case TRUE:
                jj_consume_token(TRUE);
                {
                    if (true)
                        return compiler.literal(Boolean.TRUE);
                }
                break;
            case FALSE:
                jj_consume_token(FALSE);
                {
                    if (true)
                        return compiler.literal(Boolean.FALSE);
                }
                break;
            default:
                jj_la1[36] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    final public Object NullLiteral() throws ParseException
    {
        jj_consume_token(NULL);
        {
            if (true)
                return compiler.nullLiteral();
        }
        throw new Error(Messages.OQLParser_Missing_return_statement_in_function);
    }

    /* ---------------- union --------------------- */
    final public void UnionClause(Query q) throws ParseException
    {
        Query unionQuery = null;
        label_14: while (true)
        {
            jj_consume_token(IDENTIFIER);
            jj_consume_token(LPAREN);
            unionQuery = SelectStatement();
            jj_consume_token(RPAREN);
            q.addUnionQuery(unionQuery);
            if (seeUnreservedKeyword("UNION"))
            {

            }
            else
            {
                break label_14;
            }
        }
    }

    private boolean jj_2_1(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_1();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_2();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_3();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_4();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_5();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_6();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_7();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(6, xla);
        }
    }

    private boolean jj_3R_20()
    {
        if (jj_scan_token(LT))
            return true;
        return false;
    }

    private boolean jj_3R_30()
    {
        return false;
    }

    private boolean jj_3_4()
    {
        if (jj_scan_token(LPAREN))
            return true;
        return false;
    }

    private boolean jj_3_5()
    {
        if (jj_scan_token(INSTANCEOF))
            return true;
        return false;
    }

    private boolean jj_3R_32()
    {
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3_2()
    {
        if (jj_3R_16())
            return true;
        return false;
    }

    private boolean jj_3_1()
    {
        if (jj_3R_15())
            return true;
        return false;
    }

    private boolean jj_3R_19()
    {
        jj_lookingAhead = true;
        jj_semLA = seeUnreservedKeyword("SELECT");
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_30())
            return true;
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_29()
    {
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_31()
    {
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_18()
    {
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_16()
    {
        Token xsp;
        if (jj_3R_29())
            return true;
        while (true)
        {
            xsp = jj_scanpos;
            if (jj_3R_29())
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_28()
    {
        return false;
    }

    private boolean jj_3_7()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_20())
        {
            jj_scanpos = xsp;
            if (jj_3R_21())
            {
                jj_scanpos = xsp;
                if (jj_3R_22())
                {
                    jj_scanpos = xsp;
                    if (jj_3R_23())
                    {
                        jj_scanpos = xsp;
                        jj_lookingAhead = true;
                        jj_semLA = seeUnreservedKeyword("LIKE");
                        jj_lookingAhead = false;
                        if (!jj_semLA || jj_3R_24())
                        {
                            jj_scanpos = xsp;
                            jj_lookingAhead = true;
                            jj_semLA = seeUnreservedKeyword("IN");
                            jj_lookingAhead = false;
                            if (!jj_semLA || jj_3R_25())
                            {
                                jj_scanpos = xsp;
                                jj_lookingAhead = true;
                                jj_semLA = seeUnreservedKeyword("NOT");
                                jj_lookingAhead = false;
                                if (!jj_semLA || jj_3R_26())
                                {
                                    jj_scanpos = xsp;
                                    if (jj_3R_27())
                                        return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_3()
    {
        Token xsp;
        xsp = jj_scanpos;
        jj_lookingAhead = true;
        jj_semLA = seeUnreservedKeyword("DISTINCT");
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_17())
        {
            jj_scanpos = xsp;
            jj_lookingAhead = true;
            jj_semLA = seeUnreservedKeyword("AS", "RETAINED", "SET");
            jj_lookingAhead = false;
            if (!jj_semLA || jj_3R_18())
                return true;
        }
        return false;
    }

    private boolean jj_3R_17()
    {
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_27()
    {
        if (jj_scan_token(IMPLEMENTS))
            return true;
        return false;
    }

    private boolean jj_3R_26()
    {
        if (jj_3R_33())
            return true;
        return false;
    }

    private boolean jj_3R_15()
    {
        jj_lookingAhead = true;
        jj_semLA = seeUnreservedKeyword("WHERE");
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_28())
            return true;
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_25()
    {
        if (jj_3R_32())
            return true;
        return false;
    }

    private boolean jj_3_6()
    {
        if (jj_3R_19())
            return true;
        return false;
    }

    private boolean jj_3R_24()
    {
        if (jj_3R_31())
            return true;
        return false;
    }

    private boolean jj_3R_33()
    {
        if (jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    private boolean jj_3R_23()
    {
        if (jj_scan_token(GE))
            return true;
        return false;
    }

    private boolean jj_3R_22()
    {
        if (jj_scan_token(LE))
            return true;
        return false;
    }

    private boolean jj_3R_21()
    {
        if (jj_scan_token(GT))
            return true;
        return false;
    }

    /** Generated Token Manager. */
    public OQLParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    /** Whether we are looking ahead. */
    private boolean jj_lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[37];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static
    {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0()
    {
        jj_la1_0 = new int[] { 0x0, 0x0, 0x69b46000, 0x40200000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69b46000,
                        0x69b46000, 0x60212000, 0x0, 0x0, 0x60212000, 0x0, 0x0, 0x2000000, 0x4000000, 0x0, 0x0, 0x0,
                        0x10000000, 0x0, 0x0, 0x0, 0x0, 0x69b46000, 0x69b46000, 0x9b46000, 0x0, 0x0, 0x46000,
                        0x1800000, };
    }

    private static void jj_la1_init_1()
    {
        jj_la1_1 = new int[] { 0x200, 0x100, 0x186000, 0x0, 0x20400, 0x400000, 0x20400, 0x20400, 0x400000, 0x20400,
                        0x2000, 0x200, 0x186000, 0x186000, 0x4000, 0x200, 0x200, 0x0, 0x400, 0x10000, 0x0, 0x0, 0x48,
                        0x48, 0x36, 0x0, 0x180000, 0x180000, 0x200100, 0x200100, 0x186000, 0x186000, 0x180000, 0x180000,
                        0x180000, 0x0, 0x0, };
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[7];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public OQLParser(java.io.InputStream stream)
    {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public OQLParser(java.io.InputStream stream, String encoding)
    {
        try
        {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        }
        catch (java.io.UnsupportedEncodingException e)
        {
            throw new RuntimeException(e);
        }
        token_source = new OQLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 37; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream)
    {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding)
    {
        try
        {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        }
        catch (java.io.UnsupportedEncodingException e)
        {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 37; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public OQLParser(java.io.Reader stream)
    {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new OQLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 37; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream)
    {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 37; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public OQLParser(OQLParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 37; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(OQLParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 37; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException
    {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind)
        {
            jj_gen++;
            if (++jj_gc > 100)
            {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++)
                {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null)
                    {
                        if (c.gen < jj_gen)
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static private final class LookaheadSuccess extends java.lang.Error
    {}

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind)
    {
        if (jj_scanpos == jj_lastpos)
        {
            jj_la--;
            if (jj_scanpos.next == null)
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            }
            else
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        }
        else
        {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan)
        {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos)
            {
                i++;
                tok = tok.next;
            }
            if (tok != null)
                jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind)
            return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos)
            throw jj_ls;
        return false;
    }

    /** Get the next Token. */
    final public Token getNextToken()
    {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index)
    {
        Token t = jj_lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++)
        {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk()
    {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos)
    {
        if (pos >= 100)
            return;
        if (pos == jj_endpos + 1)
        {
            jj_lasttokens[jj_endpos++] = kind;
        }
        else if (jj_endpos != 0)
        {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++)
            {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();)
            {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length)
                {
                    for (int i = 0; i < jj_expentry.length; i++)
                    {
                        if (oldentry[i] != jj_expentry[i])
                        {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0)
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException()
    {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[55];
        if (jj_kind >= 0)
        {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 37; i++)
        {
            if (jj_la1[i] == jj_gen)
            {
                for (int j = 0; j < 32; j++)
                {
                    if ((jj_la1_0[i] & (1 << j)) != 0)
                    {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0)
                    {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 55; i++)
        {
            if (la1tokens[i])
            {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++)
        {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing()
    {}

    /** Disable tracing. */
    final public void disable_tracing()
    {}

    private void jj_rescan_token()
    {
        jj_rescan = true;
        for (int i = 0; i < 7; i++)
        {
            try
            {
                JJCalls p = jj_2_rtns[i];
                do
                {
                    if (p.gen > jj_gen)
                    {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i)
                        {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                        }
                    }
                    p = p.next;
                }
                while (p != null);
            }
            catch (LookaheadSuccess ls)
            {}
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla)
    {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen)
        {
            if (p.next == null)
            {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls
    {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
