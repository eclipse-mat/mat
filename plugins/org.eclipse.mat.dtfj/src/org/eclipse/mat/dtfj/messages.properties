#*
#* Copyright (c) 2009,2018 IBM Corporation.
#* All rights reserved. This program and the accompanying materials
#* are made available under the terms of the Eclipse Public License v1.0
#* which accompanies this distribution, and is available at
#* http://www.eclipse.org/legal/epl-v10.html
#*
#* Contributors:
#*    IBM Corporation - initial API and implementation
#*
DTFJHeapObjectReader_ErrorReadingObjectAtIndex=Error reading object at index {0} address {1}
DTFJHeapObjectReader_JavaObjectAtAddressNotFound=Java object at address {0} not found
DTFJHeapObjectReader_UnexpectedTypeName=Unexpected type name {0}
DTFJHeapObjectReader_UnexpectedType=Unexpected type {0}
DTFJHeapObjectReader_ErrorReadingPrimitiveArray=Error reading primitive array, index {0} address {1} offset {2} length {3}
DTFJHeapObjectReader_ErrorReadingObjectArray=Error reading object array, index {0} address {1} offset {2} length {3}
DTFJIndexBuilder_ProblemReadingJavaStackFrame=Problem reading Java stack frame {0} for thread object at {1}
DTFJIndexBuilder_ProblemReadingJavaStackFrameLocation=Problem reading Java stack frame {0} method {1} for thread object at {2}
DTFJIndexBuilder_ProblemReadingJavaThreadName=Problem reading Java thread name
DTFJIndexBuilder_AddingExtraClassViaCachedList=Adding extra class {0} via class loader cached list
DTFJIndexBuilder_AddingExtraClassViaSuperclassList=Adding extra class {0} via superclass list
DTFJIndexBuilder_CorruptDataReadingCachedClasses=Corrupt data reading cached classes at {0} : {1} from class loader at {2}
DTFJIndexBuilder_CorruptDataReadingJavaStackFrames=Corrupt data reading Java stack frames at {0} : {1} from Java thread {2} at {3}
DTFJIndexBuilder_CorruptDataReadingDeclaredMethods=Corrupt data reading declared methods at {0} : {1} from class {2} at {3}
DTFJIndexBuilder_ProcessingImageFromFile=Processing DTFJ Image from file {0}
DTFJIndexBuilder_TookmsToGetImageFromFile=Took {0}ms to get the DTFJ image from file {1} format {2}
DTFJIndexBuilder_NoRuntimeVersionFound=No runtime version found in image
DTFJIndexBuilder_CorruptDataReadingHeaps=Corrupt data reading heaps at {0} : {1} from Java runtime at {2}
DTFJIndexBuilder_DuplicateJavaStackFrame=Ignoring Java stack frame {0} at duplicate address {1} old type {2} new type {3} for thread object at {4}
DTFJIndexBuilder_IgnoringJavaStackFrame=Ignoring Java stack frame {0} at {1} for thread object at {2} as it has same address as an object
DTFJIndexBuilder_FindingMonitorObjects=Finding monitor objects missing from heap
DTFJIndexBuilder_NullPurgedMapping=Null purged mapping
DTFJIndexBuilder_PurgedIdentifiers=Purged {0} identifiers using {1} bytes
DTFJIndexBuilder_FindingClassLoaders=Finding class loaders
DTFJIndexBuilder_ThreadObjectNotFound=Thread object {0} not found in heap so adding it now
DTFJIndexBuilder_FindingAllMethods=Finding all methods
DTFJIndexBuilder_CorruptDataReadingHeapSections=Corrupt data reading heap sections at {0} : {1} from Java runtime at {2}
DTFJIndexBuilder_CorruptDataReadingClassLoaders=Corrupt data reading class loaders to get classes at {0} : {1} from Java runtime at {2}
DTFJIndexBuilder_PurgingDeadObjectsFromImage=Purging dead objects from DTFJ image
DTFJIndexBuilder_NoDateInImage=No date found in image
DTFJIndexBuilder_FindingJVM=Finding JVM
DTFJIndexBuilder_JavaRuntimesFound={0} Java runtimes found
DTFJIndexBuilder_JVMVersion=JVM version {0}
DTFJIndexBuilder_JVMFullVersion=JVM fullversion {0}
DTFJIndexBuilder_NoRuntimeFullVersionFound=No runtime fullversion found in image
DTFJIndexBuilder_Pass1=Pass 1 - identify all objects
DTFJIndexBuilder_ProblemFindingClassLoaderInformation=Problem finding class loader information for loader at {0}
DTFJIndexBuilder_FindingClasses=Finding classes
DTFJIndexBuilder_CorruptDataReadingClasses=Corrupt data reading classes at {0} : {1} from class loader at {2}
DTFJIndexBuilder_FindingObjects=Finding objects
DTFJIndexBuilder_CorruptDataReadingObjects=Corrupt data reading objects at {0} : {1} from heaps from Java runtime at {2}
DTFJIndexBuilder_FindingClassesCachedByClassLoaders=Finding classes cached by class loaders
DTFJIndexBuilder_AddingExtraClassOfUnknownNameViaCachedList=Adding extra class {0} of unknown name via class loader cached list
DTFJIndexBuilder_AddingExtraClassOfUnknownNameViaSuperclassList=Adding extra class {0} of unknown name via superclass list
DTFJIndexBuilder_FindingThreadObjectsMissingFromHeap=Finding thread objects missing from heap
DTFJIndexBuilder_CorruptDataReadingThreads=Corrupt data reading threads at {0} : {1} from Java runtime at {2}
DTFJIndexBuilder_ProblemReadingJavaThreadInformationFor=Problem reading Java thread information for {0}
DTFJIndexBuilder_ProblemReadingJavaThreadInformation=Problem reading Java thread information
DTFJIndexBuilder_CorruptDataReadingMonitors=Corrupt data reading monitors at {0} : {1} from Java runtime at {2}
DTFJIndexBuilder_MonitorObjectNotFound=Monitor object {0} not found in heap so adding it now
DTFJIndexBuilder_FindingClassLoaderObjects=Finding class loader objects missing from heap
DTFJIndexBuilder_ClassLoaderObjectNotFoundType=Class loader object {0} type {1} not found in heap so adding it now
DTFJIndexBuilder_ClassLoaderObjectNotFound=Class loader object {0} of unknown type not found in heap so adding it now
DTFJIndexBuilder_AddingMissingObjects=Adding objects missing from heap
DTFJIndexBuilder_FoundIdentifiersObjectsClassesMethods=Found {0} identifiers, {1} objects, {2} stack frames, {3} classes, {4} methods
DTFJIndexBuilder_FoundIdentifiersObjectsClasses=Found {0} identifiers, {1} objects, {2} classes
DTFJIndexBuilder_Pass2=Pass 2 - build class and object data
DTFJIndexBuilder_BuildingClasses=Building classes
DTFJIndexBuilder_ProblemFindingJavaLangClass=Problem finding java.lang.Class via type of a Class
DTFJIndexBuilder_ProblemFindingJavaLangClassViaName=Problem finding java.lang.Class via class name
DTFJIndexBuilder_ProblemBuildingClassObjectForMethod=Problem building class object for method
DTFJIndexBuilder_FindingOutboundReferencesForClasses=Finding outbound references for classes
DTFJIndexBuilder_CorruptDataReadingConstantPool=Corrupt data reading constant pool references at {0} : {1} from class {2} at {3}
DTFJIndexBuilder_CheckRefsClass=class
DTFJIndexBuilder_ProblemCheckingOutboundReferencesForClass=Problem checking outbound references for class {0}
DTFJIndexBuilder_FindingRoots=Finding roots
DTFJIndexBuilder_FindingOutboundReferencesForObjects=Finding outbound references for objects
DTFJIndexBuilder_CheckRefsBootLoader=boot loader
DTFJIndexBuilder_ProblemCheckingBootLoaderReferences=Problem checking boot loader references
DTFJIndexBuilder_GeneratingExtraRootsFromFinalizables=Generating extra roots - finding finalizables
DTFJIndexBuilder_ObjectIsFinalizable=Object of type {0} at {1} is presumed to be finalizable so has been marked as a GC root
DTFJIndexBuilder_FinalizableObjectsMarkedAsRoots={0} finalizable objects marked as extra GC roots
DTFJIndexBuilder_GeneratingExtraRootsMarkingAllUnreferenced=Generating extra roots - marking all unreferenced objects
DTFJIndexBuilder_UnreferenceObjectsMarkedAsRoots={0} unreferenced objects marked as extra GC roots
DTFJIndexBuilder_UsingDTFJRoots=Using DTFJ root support with {0} roots
DTFJIndexBuilder_UsingConservativeGarbageCollectionRoots=Using conservative garbage collection root support with {0} roots
DTFJIndexBuilder_RepeatedMessagesSuppressed={0} repeated messages have been suppressed
DTFJIndexBuilder_TookmsToParseFile=Took {0}ms to parse the DTFJ image file {1}
DTFJIndexBuilder_GeneratingSystemRoots=Generating system roots
DTFJIndexBuilder_GeneratingThreadRoots=Generating thread roots
DTFJIndexBuilder_ThreadStateNotFound=Thread state not found for thread {0} so presuming thread is alive
DTFJIndexBuilder_ThreadNameNotFound=Thread name not found for thread {0} so presuming thread is alive
DTFJIndexBuilder_NativeThreadNotFound=Native thread not found for thread {0} so conservative garbage collection roots may be missing
DTFJIndexBuilder_ThreadObjectNotFoundSoIgnoring=Thread object not found for thread {0} with JNIEnv {1} so marking thread roots as global roots
DTFJIndexBuilder_ProblemReadingThreadInformation=Problem reading Java thread information so conservative garbage collection roots may be missing
DTFJIndexBuilder_GeneratingMonitorRoots=Generating monitor roots
DTFJIndexBuilder_UnableToFindThreadOwningMonitor=Unable to find thread owning monitor {0} so marking monitor object {1} as a global garbage collection root
DTFJIndexBuilder_FindingRootsFromDTFJ=Finding roots from DTFJ
DTFJIndexBuilder_DTFJgetHeapRootsReturnsNull=DTFJ getHeapRoots from runtime returns null
DTFJIndexBuilder_DTFJDoesNotSupportHeapRoots=DTFJ does not support heap roots
DTFJIndexBuilder_GeneratingGlobalRoots=Generating global roots
DTFJIndexBuilder_CorruptDataReadingRoots=Corrupt data reading heap roots at {0} : {1} from Java runtime at {2}
DTFJIndexBuilder_DTFJgetHeapRootsFromStackFrameReturnsNull=DTFJ getHeapRoots from stack frame returns null
DTFJIndexBuilder_NoDTFJRootsFound=No DTFJ roots found
DTFJIndexBuilder_DTFJRootsDisabled=DTFJ roots disabled
DTFJIndexBuilder_ProblemFindingClassesForObject=Problem finding classes for object at {0}
DTFJIndexBuilder_ProblemFindingComponentClass=Problem finding component class for class {0}
DTFJIndexBuilder_SkippingObject=Skipping object at {0} as id not found
DTFJIndexBuilder_ProblemGettingClassIDType=Problem getting class id for object at {0} type {1} class address {2}
DTFJIndexBuilder_ProblemGettingClassID=Problem getting class id for object at {0}
DTFJIndexBuilder_ProblemGettingObjectClass=Problem getting object class for object at {0}
DTFJIndexBuilder_ProblemGettingObjectSize=Problem getting object size for object at {0}
DTFJIndexBuilder_ProblemGettingOutboundReferences=Problem getting outbound references for object at {0}
DTFJIndexBuilder_CheckRefsObject=object
DTFJIndexBuilder_ProblemCheckingOutboundReferences=Problem checking outbound references for object at {0}
DTFJIndexBuilder_NullClassImpl=Null ClassImpl {0}
DTFJIndexBuilder_PossibleProblemReadingJavaStackFramesMethod=Possible problem reading Java stack frame number {0} at {1} estimated size {2} method {3} {4}.{5}{6} for thread {7} so conservative garbage collection roots may be missing
DTFJIndexBuilder_PossibleProblemReadingJavaStackFrames=Possible problem reading Java stack frame number {0} at {1} estimated size {2} for thread {3} so conservative garbage collection roots may be missing
DTFJIndexBuilder_PossibleProblemReadingJavaStackFramesLocation=Possible problem reading Java stack frame number {0} at {1} estimated size {2} method {3} for thread {4} so conservative garbage collection roots may be missing
DTFJIndexBuilder_ProblemReadingJavaStackFramesMethod=Problem reading Java stack frame number {0} at {1} estimated size {2} method {3} {4}.{5}{6} for thread {7} so conservative garbage collection roots may be missing
DTFJIndexBuilder_ProblemReadingJavaStackFrames=Problem reading Java stack frame number {0} at {1} estimated size {2} for thread {3} so conservative garbage collection roots may be missing
DTFJIndexBuilder_ProblemReadingJavaStackFramesLocation=Problem reading Java stack frame number {0} at {1} estimated size {2} method {3} for thread {4} so conservative garbage collection roots may be missing
DTFJIndexBuilder_CorruptDataReadingJavaStackSections=Corrupt data reading Java stack sections at {0} : {1} from Java thread {2} at {3}
DTFJIndexBuilder_HugeJavaStackSection=Huge Java stack section at {0} size {1} for thread {2}, only scanning top and bottom {3} bytes so conservative garbage collection roots may be missing
DTFJIndexBuilder_ProblemReadingJavaStackSection=Problem reading Java stack section at {0} size {1} for thread {2} so conservative garbage collection roots may be missing
DTFJIndexBuilder_CorruptDataReadingNativeStackFrames=Corrupt data reading native stack frames at {0} : {1} from Java thread {2} at {3}
DTFJIndexBuilder_PossibleProblemReadingNativeStackFrame=Possible problem reading native stack frame number {0} at {1} estimated size {2} for thread {3} so conservative garbage collection roots may be missing
DTFJIndexBuilder_ProblemReadingNativeStackFrame=Problem reading native stack frame number {0} at {1} estimated size {2} for thread {3} so conservative garbage collection roots may be missing
DTFJIndexBuilder_NativeStackFrameNotFound=Native thread stack frame not found for thread {0} so conservative garbage collection roots may be missing
DTFJIndexBuilder_DTFJIndexBuilder_CorruptDataReadingNativeStackSection=Corrupt data reading native stack sections at {0} : {1} from Java thread {2} at {3}
DTFJIndexBuilder_HugeNativeStackSection=Huge native stack section at {0} size {1} for thread {2}, only scanning top and bottom {3} bytes so conservative garbage collection roots may be missing
DTFJIndexBuilder_ProblemReadingNativeStackSection=Problem reading native stack section at {0} size {1} for thread {2} so conservative garbage collection roots may be missing
DTFJIndexBuilder_UnableToFindTypeOfRoot=Unable to find type of garbage collection root
DTFJIndexBuilder_UnableToFindReachabilityOfRoot=Unable to find reachability of garbage collection root
DTFJIndexBuilder_UnableToFindReferenceTypeOfRoot=Unable to find reference type of garbage collection root
DTFJIndexBuilder_UnableToFindTargetOfRoot=Unable to find target {0} type {1} of garbage collection root
DTFJIndexBuilder_NullTargetOfRoot=Null target of garbage collection root
DTFJIndexBuilder_UnableToFindSourceOfRoot=Unable to find source of garbage collection root with address {0}
DTFJIndexBuilder_UnableToFindRoot=Unable to find garbage collection root object with address {0} type {1} source {2} root type {3} root description {4}
DTFJIndexBuilder_MATRootTypeUnknown=MAT root type {0} unknown for root object with address {1} type {2} source {3} DTFJ root type {4} root description {5}
DTFJIndexBuilder_UnableToFindSourceID=Unable to find source ID for garbage collection root object with address {0} source {1} type {2}
DTFJIndexBuilder_ProblemGettingRoots=Problem getting garbage collection roots
DTFJIndexBuilder_UnexpectedModifiers=Unexpected modifiers {0} {1} for method {2} {3}.{4}{5}
DTFJIndexBuilder_CorruptDataReadingAddressSpaces=Corrupt data reading address spaces at {0} : {1}
DTFJIndexBuilder_CorruptDataReadingProcesses=Corrupt data reading processes from address spaces at {0} : {1}
DTFJIndexBuilder_ErrorReadingProcessID=Error reading process ID
DTFJIndexBuilder_CorruptDataReadingRuntimes=Corrupt data reading runtimes from processes at {0} : {1}
DTFJIndexBuilder_FoundJavaRuntime=Found Java runtime {0} in image at address space ''{1}'' process ID ''{2}'' runtime address ''{3}'' version {4}
DTFJIndexBuilder_IgnoringExtraJavaRuntime=Ignoring extra Java runtime {0} found in image at address space ''{1}'' process ID ''{2}'' runtime address ''{3}'' version {4}
DTFJIndexBuilder_IgnoringExtraJavaRuntimeWithoutRuntimeId=Multiple Java runtimes found without a runtime ID specified in preferences. Ignoring extra Java runtime {0} found in image at address space ''{1}'' process ID ''{2}'' runtime address ''{3}'' version {4}
DTFJIndexBuilder_IgnoringManagedRuntime=Ignoring managed runtime {0} found in image at address space ''{1}'' process ID ''{2}'' runtime address {3} version {4}
DTFJIndexBuilder_UnableToFindJavaRuntime=Unable to find Java runtime in DTFJ image after searching {0} address spaces (last space: ''{1}'') {2} processes (last process ID: ''{3}'') {4} Java runtimes (last runtime address: ''{5}'')
DTFJIndexBuilder_UnableToFindJavaRuntimeId=Unable to find Java runtime {0} in DTFJ image after searching {1} address spaces (last space: ''{2}'') {3} processes (last process ID: ''{4}'') {5} Java runtimes (last runtime address: ''{6}'')
DTFJIndexBuilder_CorruptDataReadingClassLoaders1=Corrupt data reading class loaders at {0} : {1} from Java runtime at {2}
DTFJIndexBuilder_CorruptDataReadingThreadsFromMonitors=Corrupt data reading threads from monitors at {0} : {1}
DTFJIndexBuilder_ProblemFindingRootInformation=Problem finding root information for thread {0} for monitor garbage collection root {1}
DTFJIndexBuilder_ProblemFindingThread=Problem finding thread {0} for monitor garbage collection root {1}
DTFJIndexBuilder_ExceptionGettingOutboundReferences=Exception getting outbound references from {0} {1} at address {2}
DTFJIndexBuilder_ErrorGettingOutboundReferences=Error getting outbound references from {0} {1} at address {2}
DTFJIndexBuilder_DTFJGetReferencesMissingID=DTFJ getReferences() is missing id {0} at address {1} type {2} from {3} {4} {5} at address {6}
DTFJIndexBuilder_DTFJGetReferencesExtraID=DTFJ getReferences() has extra id {0} at address {1} from {2} type {3} from {4} {5} {6} at address {7}
DTFJIndexBuilder_DTFJGetReferencesMissingAllReferences=DTFJ getReferences() is missing all references from {0} {1} at address {2}
DTFJIndexBuilder_DTFJJavaRuntime=Using DTFJ Java runtime {0}
DTFJIndexBuilder_ObjDescClass=class {0}
DTFJIndexBuilder_ObjDescObjType={0} {1}
DTFJIndexBuilder_ObjDescObjTypeAddress=object type address {0}
DTFJIndexBuilder_UsingAddressForThread=Using address {0} for thread
DTFJIndexBuilder_CorruptDataReadingReferences=Corrupt data reading references at {0} : {1} from object/class {2} at {3}
DTFJIndexBuilder_UnexpectedReferenceType=Unexpected reference type {0} (not class or object) from outbound references from {1} {2} at address {3}
DTFJIndexBuilder_UnexpectedNullReferenceTarget=Unexpected null reference target {0} from outbound references from {1} {2} at address {3}
DTFJIndexBuilder_UnexpectedReferenceTargetType=Unexpected reference target {0} type {1} from outbound references from {2} {3} at address {4}
DTFJIndexBuilder_UnableToGetOutboundReference=Unable to get outbound reference of type {0} from {1} {2} at address {3}
DTFJIndexBuilder_ClassHasNoAddress=Class {0} has no address so using {1} instead
DTFJIndexBuilder_ProblemGettingSizeOfJavaLangClass=Problem setting size of instance of java.lang.Class
DTFJIndexBuilder_CorruptDataReadingBytecodeSections=Corrupt data reading bytecode sections at {0} : {1} from class {2} at {3} method {4} {5}.{6}{7}
DTFJIndexBuilder_UnexpectedBytecodeSectionSize=Unexpectedly large or negative bytecode section at {0} of {1} bytes compared to the reference level of {2} bytes found at {3} {4}.{5}{6}. This section size is ignored for this method of this class.
DTFJIndexBuilder_CorruptDataReadingCompiledSections=Corrupt data reading compiled code sections at {0} : {1} from class {2} at {3} method {4} {5}.{6}{7}
DTFJIndexBuilder_UnexpectedCompiledCodeSectionSize=Unexpectedly large or negative compiled code section at {0} of {1} bytes compared to the reference level of {2} bytes found at {3} {4}.{5}{6}. This section size is ignored for this method of this class.
DTFJIndexBuilder_ProblemDetirminingFinalizeMethodSig=Problem determining if class {0} at {1} has a finalize method with signature ()V. Presuming class is finalizable.
DTFJIndexBuilder_ProblemDetirminingFinalizeMethod=Problem determining if class {0} at {1} has a finalize method
DTFJIndexBuilder_InvalidArrayElement=Invalid array element reference {0} of type {1} found at index {2} in array of type {3} length {4} at address {5} while finding outbound references
DTFJIndexBuilder_ProblemReadingArray=Problem reading array of type {0} length {1} offset {2} copy length {3} at address {4} while finding outbound references
DTFJIndexBuilder_CorruptDataReadingDeclaredFields=Corrupt data reading declared fields at {0} : {1} from class {2} at {3}
DTFJIndexBuilder_ProblemReadingObjectFromField=Problem reading object from field {0}.{1} of type {2} in object of type {3} at address {4} while finding outbound references
DTFJIndexBuilder_InvalidObjectFieldReference=Invalid object field reference {0} of type {1} found at field {2}.{3} of type {4} in object of type {5} at address {6} while finding outbound references
DTFJIndexBuilder_UnableToFindClassLoader=Unable to find class loader for class {0} at {1}
DTFJIndexBuilder_SuperclassNotFound=Superclass at address {0} index not found {1} for class at address {2} index {3} name {4}
DTFJIndexBuilder_UnexpectedValueForStaticField=Unexpected value {0} for static field {1} of type {2} found in class {3} at address {4}
DTFJIndexBuilder_InvalidStaticField=Invalid static field {0} of type {1} found in class {2} at address {3}
DTFJIndexBuilder_ProblemBuildingClassObject=Problem building class object
DTFJIndexBuilder_UnableToFindTypeOfObject=Unable to find type of object at {0} for class at address {1} name {2}
DTFJIndexBuilder_InvalidField=Invalid field {0} of type {1} found in class {2} at address {3}
DTFJIndexBuilder_CorruptDataReadingConstantPoolReferences=Corrupt data reading constant pool references at {0} : {1} from class {2} at {3}
DTFJIndexBuilder_ClassAtAddressNotFound=Class at address {0} index not found {1} name {2}
DTFJIndexBuilder_ClassLoaderAtAddressNotFound=Class loader at address {0} not found {1} for class at address {2} index {3} name {4}
DTFJIndexBuilder_CorruptDataReadingCompiledCodeSections=Corrupt data reading compiled code sections at {0} : {1} from class {2} at {3} method {4} {5}.{6}{7}
DTFJIndexBuilder_MethodHasNonUniqueAddress=Method {0} from class {1} has address {2} which is not unique so using {3} instead
DTFJIndexBuilder_MethodHasNoAddress=Method {0} from class {1} has no address so using {2} instead
DTFJIndexBuilder_DeclaringClassNotFound=Declaring class not found for method {0} at address {1}
DTFJIndexBuilder_SuperclassInWrongAddressSpace=Superclass of {0} is in the wrong address space {1} instead of {2}
DTFJIndexBuilder_ImageAddressSpaceEqualsBroken=ImageAddressSpace.equals() broken {0} {1} identity hashes {2} {3}
DTFJIndexBuilder_NoSuperclassForArray=No superclass for array {0} so using {1}
DTFJIndexBuilder_InterfaceShouldNotHaveASuperclass=Interface {0} should not have a superclass {1}
DTFJIndexBuilder_PrimitiveShouldNotHaveASuperclass=Primitive {0} should not have a superclass {1}
DTFJIndexBuilder_ProblemGettingSuperclass=Problem getting superclass for class {0} at {1}
DTFJIndexBuilder_NoClassLoader=No class loader for {0}, trying component type {1} class loader instead
DTFJIndexBuilder_HighestMemoryAddressFromAddressSpaceIsUnaccessibleFromPointers=Highest memory address {0} from address space {1} is unaccessible from {2}-bit pointers
DTFJIndexBuilder_UsingProcessPointerSizeNotAddressSpacePointerSize=Using process pointer size of {0}-bits not address space {1} pointer size of {2}-bits
DTFJIndexBuilder_UnableToReadDumpInDTFJFormat=Unable to read dump {0} in DTFJ format {1}
DTFJIndexBuilder_UnableToReadDumpMetaInDTFJFormat=Unable to read dump {0} metafile {1} in DTFJ format {2}
DTFJIndexBuilder_UnableToFindDTFJForFormat=Unable to find DTFJ for format {0}
DTFJIndexBuilder_UsingAddressForThreadName=Using address {0} for thread {1}
DTFJIndexBuilder_Runtime_Description=Address space ID: {0} \nProcess ID: {1} \nRuntime: {2}
DTFJPreferencePage_AllMethods=Stack frames as pseudo-objects and all methods as pseudo-classes
DTFJPreferencePage_Description=Configuration used for parsing DTFJ dumps from IBM virtual machines for Java.
DTFJPreferencePage_MethodsAsClasses=Whether to treat stack frames as pseudo-objects, methods as pseudo-classes and methods as the type of stack frames
DTFJPreferencePage_NoMethods=Normal
DTFJPreferencePage_OnlyStackFrames=Only stack frames as pseudo-objects
DTFJPreferencePage_RunningMethods=Stack frames as pseudo-objects and running methods as pseudo-classes
DTFJPreferencePage_SuppressClassNativeSizes=Suppress Class native memory size calculations (IBM system dumps)
InitDTFJ_FailedToCreate=Failed DTFJ install test, updating bundle to resolve DTFJ references
InitDTFJ_UpdatingBundle=Updating bundle
InitDTFJ_UpdatedBundle=Updated bundle to resolve DTFJ references
InitDTFJ_FailedToUpdateBundle=Failed to update bundle
InitDTFJ_ErrorClearDumps=Error clearing cached dumps on stopping bundle
StackFrameResolver_file=({0})
StackFrameResolver_file_line=({0}:{1})
StackFrameResolver_method={0}
StackFrameResolver_method_file={0} ({1})
StackFrameResolver_method_file_line={0} ({1}:{2})
ThreadDetailsResolver_alive=alive
ThreadDetailsResolver_blocked_on_monitor_enter=blocked on monitor enter
ThreadDetailsResolver_DTFJ_Name=DTFJ Name
ThreadDetailsResolver_in_native=in native
ThreadDetailsResolver_in_object_wait=in object wait
ThreadDetailsResolver_interrupted=interrupted
ThreadDetailsResolver_JNIEnv=JNIEnv
ThreadDetailsResolver_Native_id=Native id
ThreadDetailsResolver_Native_stack=Native stack
ThreadDetailsResolver_parked=parked
ThreadDetailsResolver_Priority=Priority
ThreadDetailsResolver_runnable=runnable
ThreadDetailsResolver_sleeping=sleeping
ThreadDetailsResolver_State=State
ThreadDetailsResolver_State_value=State value
ThreadDetailsResolver_suspended=suspended
ThreadDetailsResolver_terminated=terminated
ThreadDetailsResolver_vendor1=vendor 1
ThreadDetailsResolver_vendor2=vendor 2
ThreadDetailsResolver_vendor3=vendor 3
ThreadDetailsResolver_waiting=waiting
ThreadDetailsResolver_waiting_indefinitely=waiting indefinitely
ThreadDetailsResolver_waiting_with_timeout=waiting with timeout
